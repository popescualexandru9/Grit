@model  Grit.ViewModels.Training.HistoryViewModel
@{
    ViewBag.Title = "Workout History";
    var cntClearfix = 0;
}


<div class="calendar-navigation" style="margin-top:35px;">
    <h2 id="workoutHistoryTitle"> Workout History</h2>
    <div class="btn-group pull-right">
        <button class="btn btn-default" data-calendar-nav="prev">&lt;&lt; Prev</button>
        <button class="btn btn-default active" data-calendar-nav="today">Today</button>
        <button class="btn btn-default" data-calendar-nav="next">Next &gt;&gt;</button>
    </div>
</div>

<div id="calendar" style="margin-top:10px;"></div>

<div class="btn-group pull-right" style="margin-top:20px;">
    <button class="btn btn-default" data-calendar-view="year">Year</button>
    <button class="btn btn-default active" data-calendar-view="month">Month</button>
    <button class="btn btn-default " data-calendar-view="week">Week</button>
</div>


<div class="row" style="margin-top:55px;">
    @foreach (var workout in Model.Workouts)
    {
        <div class="col-lg-4">
            <div class="card card-default workoutModal"
                 data-targeturl="@Url.Action("HistoryDetails","TrainingSplit",new { id = workout.WorkoutBundle.Workout.Id})">
                <div class="card-header">@workout.TrainingSplitName</div>
                <div class="card-body">
                    <h2 style="margin:10px 0">@workout.WorkoutBundle.Workout.Name</h2>
                    <div style="margin:10px 0">
                        <span class="card-icons">
                            <span class="glyphicon glyphicon-fire" style="color:red;"> </span>
                            @workout.KcalBurned.low - @workout.KcalBurned.high kcal
                        </span>

                        <span class="card-icons pull-right" style="margin-top:10px;">
                            <span class="glyphicon glyphicon-calendar"> </span>
                            @workout.WorkoutBundle.Workout.Date.ToString("dd MMM yyyy")
                        </span>
                        <br />
                        <span class="card-icons">
                            <span class="glyphicon glyphicon-time"> </span>
                            @workout.WorkoutBundle.Workout.TimeSpan min
                        </span>

                    </div>
                    <div class="row">
                        <h4 class="col-xs-6">Exercise </h4>
                        <h4 class="col-xs-6" style="text-align:right">Best Set </h4>
                    </div>

                    @for (var i = 0; i < workout.WorkoutBundle.Workout.Exercises.Count(); i++)
                    {
                        <div class="card-exercise row" style="margin-top:0px;">
                            <p class="col-xs-8" id="exerciseName">
                                @workout.WorkoutBundle.Workout.Exercises[i].Sets.Count() x @workout.WorkoutBundle.Workout.Exercises[i].Name
                            </p>

                            @if (@workout.WorkoutBundle.BestSets[i].Weight > 0)
                            {
                                <p class="col-xs-4 " style="padding-left:0px;text-align:right;">
                                    @workout.WorkoutBundle.BestSets[i].Weight kg x @workout.WorkoutBundle.BestSets[i].Repetitions
                                </p>
                            }
                            else
                            {
                                <p class="col-xs-4 " style="padding-left:0px;text-align:right;">
                                    @workout.WorkoutBundle.BestSets[i].Repetitions reps
                                </p>
                            }

                        </div>
                    }
                </div>
            </div>
        </div>
        cntClearfix++;
        if (cntClearfix % 3 == 0)
        {
            <div class="clearfix"></div>

        }
    }


</div>


<div class="workoutModalContainer modal fade" tabindex="-1" role="dialog">
    <a href="#close" title="Close" class="modal-close-btn">X</a>
    <div class="modal-content">
        <div class="modal-body"></div>
    </div>
</div>

@Html.HiddenFor(x => x.UserId)


@section scripts{


    <script>
        // Calendar
        const userId = $("#UserId").val();
        var options = {
            events_source: "https://localhost:44387/feedCalendarApi/" + userId,
            view: 'month',
            tmpl_path: '/Content/calendarTemplate/',
            first_day: 1,
            tmpl_cache: false,
            onAfterViewLoad: function (view) {
                $('#workoutHistoryTitle').text(this.getTitle());
                $('.btn-group button').removeClass('active');
                $('button[data-calendar-view="' + view + '"]').addClass('active');
            },
            classes: {
                months: {
                    general: 'label'
                }
            }
        };
        var calendar = $("#calendar").calendar(options);

        $('.btn-group button[data-calendar-nav]').each(function () {

            $(this).click(function () {
                removeClassActive();
                $(this).addClass('active');
                calendar.navigate($(this).data('calendar-nav'));
            });
        });

        $('.btn-group button[data-calendar-view]').each(function () {
            $(this).click(function () {
                removeClassActive();
                $(this).addClass('active');
                calendar.view($(this).data('calendar-view'));
            });
        });

        function removeClassActive() {
            $('.btn-group button[data-calendar-nav]').each(function () {
                $(this).removeClass('active');
            });

            $('.btn-group button[data-calendar-view]').each(function () {
                $(this).removeClass('active');
            });
        };


        function launchModal() {
            $(".workoutModalContainer").remove();

            $.get($(this).data("targeturl"), function (data) {
                $('<div class="workoutModalContainer modal fade">  <div class="modal-dialog" >' +
                    '<div class="modal-content" id= "modalbody" >' +
                    data +
                    '</div></div></div>').modal();
            });
        }

        $('.workoutModal').click(launchModal);

        // Save data
        function sendWeights(icon) {
            let ok = true;
            let hiddenWorkoutId = $("#hiddenWorkoutId").text();
            let actualWeight = [];
            let actualReps = [];
            let exerciseNames = [];


            let workoutDate = $("#workoutDate").val();
            if (!workoutDate || moment(workoutDate, 'ddd, DD MMM YYYY', true).isValid() == false) {
                $("#workoutDate").css("border-color", "red");
                ok = false;
            }
            else {
                $("#workoutDate").css('border-color', "green");
            }

            let timeSpan = $("#timeSpan").val();
            if (!timeSpan || isNaN(timeSpan) || timeSpan < 0 || timeSpan > 180) {
                $("#timeSpan").css("border-color", "red");
                ok = false;
            }
            else {
                $("#timeSpan").css('border-color', "green");
            }


            $(icon).parent().eq(0).parent().eq(0).find('.weights').each(function () {
                if (!this.value || isNaN(this.value) || this.value < 0 || this.value > 500) {
                    $(this).css("border-color", "red");
                    ok = false;
                } else {
                    $(this).css('border-color', "green");
                    actualWeight.push(this.value);
                }
            });

            $(icon).parent().eq(0).parent().eq(0).find('.reps').each(function () {
                if (!this.value || isNaN(this.value) || this.value < 0 || this.value > 100) {
                    $(this).css("border-color", "red");
                    ok = false;
                } else {
                    $(this).css('border-color', "green");
                    actualReps.push(this.value);
                }
            });

            $(icon).parent().eq(0).parent().eq(0).find('.changeExerciseName').each(function () {
                if (!this.value) {
                    $(this).css("border-color", "red");
                    ok = false;
                } else {
                    $(this).css('border-color', "green");
                    exerciseNames.push(this.value);
                }
            });



            if (ok) {
                let valdata = {
                    WorkoutId: hiddenWorkoutId,
                    TimeSpan: timeSpan,
                    ActualWeight: actualWeight,
                    ActualReps: actualReps,
                    WorkoutDate: workoutDate,
                    ExerciseNames: exerciseNames
                };

                $.ajax({
                    url: "/TrainingSplit/ModifyWorkout",
                    type: "POST",
                    dataType: 'json',
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    data: valdata,
                    success: function (response) {
                        window.location.href = response.redirectToUrl;
                    }

                });
            }

        }

    </script>
}

@section Quote{
    Make shit happen
}