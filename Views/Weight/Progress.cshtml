@model  Grit.ViewModels.ProgressViewModel
@{
    string[] options = { "One Week", "One Month", "Two Months", "Three Months", "Six Months", "One Year", "Two Years", "Five Years" };
    ViewBag.Title = "Progress";
    SelectList list = new SelectList(options);
}

<br />
@using (Html.BeginForm("Progress", "Weight", FormMethod.Post, new { }))
{
    @Html.DropDownList("ProgressList", list as SelectList, new { @class = "form-control pull-right",
    @style = "margin-right : 26px; direction: rtl;",
    @id = "chartChange" })
}
<br />

<canvas id="line-chart"></canvas>

<div class="row" style="margin-top : 50px; margin-bottom: -20px">
    <h3 class="pull-left" style="margin : 15px 0 0 15px; cursor:pointer" id="dropDownEntryBtn">
        Entries
        <span class="glyphicon glyphicon-triangle-bottom pull-right" style="font-size : 20px; top:4px; cursor:pointer">   </span>
    </h3>

    <button type="submit" class="pull-right btn btn-primary" style="margin: 10px 15px 15px 0;" data-toggle="modal" data-target="#addWeightModal">
        Add weight
    </button>
    <div class="modal fade" id="addWeightModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                @using (Html.BeginForm("AddWeight", "Weight", FormMethod.Post, new { }))
                {
                    <div class="modal-body" style="margin-left:20px;">

                        <div class="form-group row">
                            @Html.LabelFor(m => m.TodaysWeight.Date, new { @class = "col-sm-2 control-label", style = "padding-top :7px;" })
                            @Html.TextBoxFor(m => m.TodaysWeight.Date, "{0:dd MMM yyyy}", new
                       {
                           @class = "form-control datepicker col-sm-10",
                           style = "background-color:transparent; color:#fff",
                           autocomplete = "off",
                           onclick = "$(this).css({ 'background-color': '#fff', 'color': '#555' });",
                           onblur = "$(this).css({ 'background-color': 'transparent', 'color': '#fff' });"
                     
                       })
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(m => m.TodaysWeight.Weigth, new { @class = "col-sm-2 control-label", style = "padding-top : 8px;" })
                            @Html.TextBoxFor(x => x.TodaysWeight.Weigth, new { @class = "form-control col-sm-10 ", id = "addWeightInputId", required = "true" })
                        </div>

                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-primary" id="removeBtnModal" type="button"> Remove </button>
                        <input type="submit" value="Submit" class="btn btn-primary" />
                    </div>
                }
            </div>
        </div>
    </div>



</div>

<hr />

<div class="row" >
    <div class="col-md-6" id="dropDownEntries">
        <p class="text-danger" style="margin-left : 35px; display:none">
            Weight field should contain between 0 and 2 decimals.
            <br /> Please respect the format to be able to update.
        </p>

        <div >
            @{
                foreach (var day in Model.Weights.Reverse())
                {
                    using (Html.BeginForm("ChangeWeight", "Weight", new { dateInput = day.Date }, FormMethod.Post,
                                                                    new { @class = "form-horizontal", role = "form", @id = "progressChangeWeightForm" }))
                    {
                        <div class="form-group">
                            <label class="control-label col-md-4" style="font-size :16px; color:#fff"> @day.Date.ToString("dd MMM yyyy") </label>
                            @Html.TextBox("weightInput", day.Weigth, new
                       {
                           @class = "form-control col-md-8",
                           style = "background-color:transparent; color:#fff",
                           id = "changeWeightInputId",
                           onclick = "$(this).css({ 'background-color': '#fff', 'color': '#555' });",
                           onblur = "$(this).css({ 'background-color': 'transparent', 'color': '#fff' });",
                           onchange = "$(this).parents().submit(); "
                       })
                        </div>
                        <br />
                    }

                }
            }
        </div>
    </div>
    <div class="col-md-6">
        <div class="panel panel-default" id="panelProgress">
            <div class="panel-heading">
                <h3 class="panel-title">Statistics</h3>
            </div>
            <div class="panel-body" >
                <dl class="dl-horizontal" style="margin-left :15px;">


                    <dt data-toggle="tooltip" data-placement="right" title="For most adults, an ideal BMI is in the 18.5 to 24.9 range">BMI :</dt>
                    <dd data-toggle="tooltip" data-placement="left" title="" id="bmiStats"> </dd>

                    <dt>All-time high :</dt>
                    <dd>@Model.Weights.Max(x => x.Weigth) kg</dd>

                    <dt>All-time low :</dt>
                    <dd>@Model.Weights.Min(x => x.Weigth) kg</dd>

                    <dt>Entries :</dt>
                    <dd>@Model.Weights.Count()</dd>

                    <dt>Average last 7 entries :</dt>
                    <dd id="avgStats"></dd>

                </dl>
            </div>
        </div>
    </div>
</div>



@section scripts{
    <script>
    $(document).ready(function () {
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('status') === "bad") {
            $(".text-danger").toggle();
        }

        var ctx = $("#line-chart");
        let start = new Date(), // start date chart
            end = new Date(), // end date chart
            data = [],
            labels = [],
            weights = {}; // dict[date]=weight used of O(1) operations
        setStart();

        @foreach (var day in Model.Weights)
        {
            @:data.push('@day.Weigth');
            @:labels.push('@day.Date.ToString("dd/MM/yyyy")');
            @:weights["@day.Date.ToString("dd/MM/yyyy")"] = @day.Weigth;
         }

        // Average for the last 7 entries
        let avg = calculateAvg(data);

        let chart = new Chart(ctx, {
            data: {
                labels: labels,
                datasets: [
                    {
                        type: 'line',
                        label: 'Weight',
                        showLine: true,
                        fill: false,
                        data: data,
                        lineTension: 0,
                        pointBorderWidth: 2,
                        borderColor: '#66fcf1',
                        pointBackgroundColor: 'red',
                        radius: 4,
                    },
                    {
                        type: 'line',
                        label: 'Average',
                        hidden: true,
                        borderCapStyle: 'round',
                        showLine: true,
                        fill: false,
                        data: avg,
                        lineTension: 0.5,
                        pointBorderWidth: 2,
                        borderColor: 'red',
                        pointBackgroundColor: '#66fcf1',
                        radius: 0,
                        borderWidth: 2,
                        borderDash: [10, 13]
                    },
                ]
            },
            options: {
                responsive: true,
                legend: {
                    labels: {
                        fontColor: "#fff",
                        fontSize: 16
                    }
                },
                tooltips: {
                    mode: 'label',
                    backgroundColor: "red",
                    titleFontColor: '#fff',
                    bodyFontColor: '#fff'
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        type: "time",
                        display: true,
                        time: {
                            parser: 'DD/MM/YYYY',
                            tooltipFormat: 'll',
                            unit: 'day',
                            displayFormats: {
                                day: 'MMM DD'
                            },
                            min: start,
                            max: end
                        },
                        ticks: {
                            fontColor: "#fff",
                            fontSize: 14
                        }
                    }],
                    yAxes: [{
                        display: true,
                        ticks: {
                            fontColor: "#fff",
                            stepSize: 1
                        },
                        gridLines: {
                            color: '#999',
                            lineWidth: 0.3
                        },
                        scaleLabel: {
                            display: true,
                            fontSize : 14,
                            fontColor: '#fff',
                            labelString: 'Kg'
                        }
                    }]
                }
            }

            });

        // Set start for chart when a value is selected from dropdown list
        $('#chartChange').change(function () {
            let btn = document.getElementById('chartChange');
            let value = btn.options[btn.selectedIndex].text;
            let todaysDate = new Date();
            start.setFullYear(todaysDate.getFullYear());

            switch (value) {
                case "One Week":
                    start.setMonth(todaysDate.getMonth());
                    start.setDate(todaysDate.getDate() - 6);
                    break;
                case "One Month":
                    start.setMonth(todaysDate.getMonth() - 1);
                    start.setDate(todaysDate.getDate());
                    break;
                case "Two Months":
                    start.setMonth(todaysDate.getMonth() - 2);
                    start.setDate(todaysDate.getDate());
                    break;
                case "Three Months":
                    start.setMonth(todaysDate.getMonth() - 3);
                    start.setDate(todaysDate.getDate());
                    break;
                case "Six Months":
                    start.setMonth(todaysDate.getMonth() - 6);
                    start.setDate(todaysDate.getDate());
                    break;
                case "One Year":
                    start.setMonth(todaysDate.getMonth() - 12);
                    start.setDate(todaysDate.getDate());
                    break;
                case "Two Years":
                    start.setMonth(todaysDate.getMonth() - 24);
                    start.setDate(todaysDate.getDate());
                    break;
                case "Five Years":
                    start.setMonth(todaysDate.getMonth() - 60);
                    start.setDate(todaysDate.getDate());
                    break;

            }
            start.setHours(0, 0, 0, 0);
            chart.update();
        });

        function calculateAvg(data) {
            let avg = [];
            // Parse array of strings to array of floats
            data = data.toString().match(/\d+(?:\.\d+)?/g).map(Number);

            // Calculate average for each unit
            for (let i = 0; i < data.length; i++) {
                let divider = 7, j = 6;

                if (avg.length + 1 < 7) {
                    divider = avg.length + 1;
                }
                if (avg.length < 7) {
                    j = avg.length;
                }

                avg[i] = (data.slice(i - j, i + 1).reduce((a, b) => a + b, 0)) / divider;
            }

            // Parse array back to array of strings
            for (let i = 0; i < avg.length; i++) {
                avg[i] = avg[i].toFixed(2);
            }

            $("#avgStats").html(avg[avg.length - 1] + " kg");

            let denominator = Math.pow((@Model.Height)/100, 2);
            let bmi = ((@Model.Weights.Reverse().FirstOrDefault().Weigth) / (denominator)).toFixed(2);
            $("#bmiStats").html(bmi);

            let bmiPop = "";
            if (bmi < 18.5) {
                bmiPop = "Underweight";
            } else if (bmi > 18.5 && bmi < 24.9) {
                bmiPop = "Normal";
            }
            else if (bmi > 24.9 && bmi < 29.9) {
                bmiPop = "Overweight";
            }
            else if (bmi > 29.9) {
                bmiPop = "Obese";
            }

            $("#bmiStats").attr("title", bmiPop);

            return avg;
        }

        function setStart() {
            start.setDate(start.getDate() - 6);
            start.setHours(0, 0, 0, 0);
            end.setHours(0, 0, 0, 0);
        }

        $("#dropDownEntryBtn").click(function () {
            //open up the content needed - toggle the slide - if visible, slide up, if not slidedown.
            $("#dropDownEntries").slideToggle(1000, function () { });

        });
        $(function () {
            $('[data-toggle="popover"]').popover()
        })


        $('.datepicker').datepicker({
            dateFormat: 'dd M yy',
            changeMonth: true,
            changeYear: true,
            maxDate: 0,
            firstDay: 1,
            yearRange: "-5:+0",
            beforeShow: function () {
                setTimeout(
                    function () {
                        $('#ui-datepicker-div').css('z-index', 99999);
                    }, 100
                )
            }
        });


        let dateModal = new Date();
        let dateModalString =  "";
        // Change AddWeight modal input data
        $(".datepicker").change(function () {
            dateModal = new Date(this.value);

            let d = dateModal.getDate();
            let m = dateModal.getMonth() + 1;
            let y = dateModal.getFullYear();

            dateModalString = (m <= 9 ? '0' + m : m) + '/' + (d <= 9 ? '0' + d : d) + '/' + y;
            let dateString = (d <= 9 ? '0' + d : d) + '/' + (m <= 9 ? '0' + m : m) + '/' + y;
         

            $('#addWeightInputId').val(weights[dateString]);
        });

        $("#removeBtnModal").click(function () {

            let date = "";

            if (dateModalString) {
                date = dateModalString + " 12:00:00 AM";
            }
            else {
                date = new Date().toLocaleDateString('en-US') + " 12:00:00 AM";
            }
              

            let data = {
                dateInput: date
            }

            $.ajax({
                url: "/Weight/RemoveEntry",
                type: "POST",
                dataType: 'json',
                contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                data: data
            }).done(function (response) {
                window.location.href = response.redirectToUrl;
            })
        });

    });
    </script>
}

@section Quote{
    Enjoy the journey to the peek.
}
